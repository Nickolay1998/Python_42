##staticmethod
class Pen:
    model = "ballpen"
    producer = "BIC"

    @staticmethod
    def pen_strong(lenght, strenght):
        if lenght > strenght:
            return "Broken"
        else:
            return "Passed"
        
    def __init__(self,color,width):
        self.color = color
        self.width = width
        
    def draw(self): #метод обьекта классу
        return (f"{self.color} line")
parker = Pen("blue",2)
print(parker.draw())
print(parker.pen_strong(2,3))

##В Python статический метод — это метод, который принадлежит классу, но не имеет доступа ни к экземпляру класса, ни к его атрибутам или другим методам.
##Он похож на обычную функцию, но организован в пространстве имен класса. Статические методы используются, когда вам нужно создать метод, который логически связан с классом, но не зависит от его состояния.
##Особенности статических методов:
##Они не принимают первый параметр self (как метод экземпляра) или cls (как метод класса).
##Их можно вызывать без создания экземпляра класса.
##Они определяются с использованием декоратора @staticmethod.
##Пример:
##python
##
##class MathOperations:
##    @staticmethod
##    def add(x, y):
##        return x + y
##
### Вызов статического метода без создания экземпляра класса
##result = MathOperations.add(5, 7)
##print(result)  # Вывод: 12
##В данном примере метод add является статическим методом, потому что он не зависит ни от каких свойств или методов экземпляра или класса. Мы можем вызывать его напрямую через класс, не создавая объект.
##
##Когда использовать статический метод:
##Когда метод не требует доступ к атрибутам или другим методам класса.
##Когда логически метод должен быть частью класса, но не должен изменять или взаимодействовать с состоянием экземпляров класса.
##Дополнительно, статические методы могут быть полезны для организации кода, когда необходимо сгруппировать функции, относящиеся к одному классу, даже если они не работают с состоянием этого класса.
